@ Generated by gcc 2.95.4 20010319 (prerelease) [gccsdk 20010912] for ARM/RISC OS
@ r0	RN	0
@ r1	RN	1
@ r2	RN	2
@ r3	RN	3
@ r4	RN	4
@ r5	RN	5
@ r6	RN	6
@ r7	RN	7
@ r8	RN	8
@ r9	RN	9
@ r10	RN	10
@ r11	RN	11
@ r12	RN	12
@ r13	RN	13
@ r14	RN	14
@ r15	RN	15
@ a1	RN	0
@ a2	RN	1
@ a3	RN	2
@ a4	RN	3
@ v1	RN	4
@ v2	RN	5
@ v3	RN	6
@ v4	RN	7
@ v5	RN	8
@ v6	RN	9
@ sl	RN	10
@ fp	RN	11
@ ip	RN	12
@ sp	RN	13
@ lr	RN	14
@ pc	RN	15
@ f0	FN	0
@ f1	FN	1
@ f2	FN	2
@ f3	FN	3
@ f4	FN	4
@ f5	FN	5
@ f6	FN	6
@ f7	FN	7

.text

.global	GetDPRegRHS

GetDPRegRHS:
	@ args = 0, pretend = 0, frame = 0, alloca = 0
	@ frame_needed = 0, anonymous_args = 0, regs_live[14] = 0
	@ nonlocal_label = 0, nonlocal_goto = 0, clobbers lr = 1
	stmfd	sp!, {v1, v2, lr}
	mov	v1, a2
	and	lr, v1, #15 @ RHS Register
	tst	v1, #16  	@ Is shift amount in register?

	beq	L4

	ldr	a3, L50
	ldr	ip, [a3, #68]
	add	a1, ip, #4
	str	a1, [a3, #68] @ increase PC

	cmp	lr, #15
	ldr	ip, [a3, #476]
	mov	v2, a3
	orr	ip, ip, #2    @ increase Cycle count
	str	ip, [a3, #476]
	bne	L5
	add	a3, v2, #424

	ldmia	a3, {a2, a3, a4, ip, lr}

	mov	a3, a3, asl #30
	orr	a3, a3, a2, asl #31
	orr	a3, a3, a4, asl #29
	orr	ip, a3, a3, asl #28

	bic	a4, a1, #-67108861
	orr	ip, ip, lr, asl #26
	ldr	a3, [v2, #448]
	orr	ip, ip, a4
	orr	lr, ip, a3

	b	L6
L5:
	add	ip, v2, #8
	ldr	lr, [ip, lr, asl #2]
L6:
	mov	a3, #0
	str	a3, [v2, #1168]
	ldr	ip, [v2, #472]
	mov	a3, v1, lsr #6
	add	ip, ip, #1
	str	ip, [v2, #472]
	and	a3, a3, #60
	add	a4, v2, #8
	mov	ip, v1, asl #25
	mov	ip, ip, lsr #30
	ldrb	a1, [a4, a3]	@ zero_extendqisi2
	ldr	pc, [pc, ip, asl #2]
	nop
L27:
.word	L9
.word	L14
.word	L19
.word	L24

L9:
	cmp	a1, #0
	moveq	a1, lr
	ldmeqfd	sp!, {v1, v2, pc}
	cmp	a1, #31
	movhi	a1, #0
	movls	a1, lr, asl a1
	ldmfd	sp!, {v1, v2, pc}

L14:
	cmp	a1, #0
	moveq	a1, lr
	ldmeqfd	sp!, {v1, v2, pc}
	cmp	a1, #31
	movls	a1, lr, lsr a1
	movhi	a1, #0
	ldmfd	sp!, {v1, v2, pc}

L19:
	cmp	a1, #0
	moveq	a1, lr
	ldmeqfd	sp!, {v1, v2, pc}
	cmp	a1, #31
	movhi	a1, lr, asr #31
	movls	a1, lr, asr a1
	ldmfd	sp!, {v1, v2, pc}

L24:
	ands	a1, a1, #31
	moveq	a1, lr
	movne	a1, lr, ror a1
	ldmfd	sp!, {v1, v2, pc}
@L8
@	b	L29
L4:
	cmp	lr, #15
	bne	L30
	ldr	a4, L50

	add	a3, a4, #424

	ldmia	a3, { a1, a2, a3, ip, lr}

	mov	v2, a4

	mov	a2, a2, asl #30
	orr	a2, a2, a1, asl #31
	orr	a2, a2, a3, asl #29
	orr	ip, a2, ip, asl #28

	ldr	a3, [a4, #68]
	orr	ip, ip, lr, asl #26
	ldr	a2, [a4, #448]
	bic	a3, a3, #-67108861
	orr	ip, ip, a3
	orr	lr, ip, a2
	b	L31
L30:
	ldr	ip, L50
	mov	v2, ip
	add	ip, ip, #8
	ldr	lr, [ip, lr, asl #2]
L31:
	mov	a3, v1, asl #20
	mov	a1, a3, lsr #27
	mov	ip, v1, asl #25
	mov	ip, ip, lsr #30
	ldr	pc, [pc, ip, asl #2]
	nop
L43:
.word	L12
.word	L34
.word	L37
.word	L40

L12:
	mov	a1, lr, asl a1
	ldmfd	sp!, {v1, v2, pc}

L34:
	cmp	a1, #0
	movne	a1, lr, lsr a1
	ldmfd	sp!, {v1, v2, pc}

L37:
	cmp	a1, #0
	moveq	a1, lr, asr #31
	movne	a1, lr, asr a1
	ldmfd	sp!, {v1, v2, pc}

L40:
	cmp	a1, #0
	movne	a1, lr, ror a1
	ldmnefd	sp!, {v1, v2, pc}
	ldr	ip, [v2, #432]
	mov	a1, lr, lsr #1
	orr	a1, a1, ip, asl #31
	ldmfd	sp!, {v1, v2, pc}
L50:
.word	statestr
.global	GetDPSRegRHS
GetDPSRegRHS:
	@ args = 0, pretend = 0, frame = 0, alloca = 0
	@ frame_needed = 0, anonymous_args = 0, regs_live[14] = 0
	@ nonlocal_label = 0, nonlocal_goto = 0, clobbers lr = 1
	stmfd	sp!, {v1, v2, lr}
	mov	v1, a2
	and	lr, v1, #15
	tst	v1, #16
	beq	L53
	ldr	a3, L106
	ldr	ip, [a3, #68]
	add	a1, ip, #4
	str	a1, [a3, #68]
	cmp	lr, #15
	ldr	ip, [a3, #476]
	mov	v2, a3
	orr	ip, ip, #2
	str	ip, [a3, #476]
	bne	L54

	add	a3, v2, #424
	ldmia	a3, {a3, ip}	@ phole ldm
	ldr	a4, [v2, #432]
	ldr	a2, [v2, #436]

	mov	ip, ip, asl #30
	orr	ip, ip, a3, asl #31
	orr	ip, ip, a4, asl #29
	orr	ip, ip, a2, asl #28
	ldr	a3, [v2, #440]
	bic	a4, a1, #-67108861
	orr	ip, ip, a3, asl #26
	ldr	a3, [v2, #448]
	orr	ip, ip, a4
	orr	lr, ip, a3
	b	L55
L54:
	add	ip, v2, #8
	ldr	lr, [ip, lr, asl #2]
L55:
	mov	a3, #0
	str	a3, [v2, #1168]
	ldr	ip, [v2, #472]
	mov	a3, v1, lsr #6
	add	ip, ip, #1
	str	ip, [v2, #472]
	and	a3, a3, #60
	add	a4, v2, #8
	mov	ip, v1, asl #25
	mov	ip, ip, lsr #30
	ldrb	a3, [a4, a3]	@ zero_extendqisi2
	ldr	pc, [pc, ip, asl #2]
	nop
L81:
.word	L58
.word	L65
.word	L72
.word	L77
L58:
	cmp	a3, #0
	bne	L59
L59:
	cmp	a3, #32
	moveq	a1, #0
	andeq	ip, lr, #1
	streq	ip, [v2, #432]
	ldmeqfd	sp!, {v1, v2, pc}
L61:
	bls	L63
L101:
	mov	ip, #0
	mov	a1, ip
	str	ip, [v2, #432]
	ldmfd	sp!, {v1, v2, pc}
L63:
	mov	a1, lr, asl a3
	rsb	ip, a3, #32
L102:
	mov	ip, lr, lsr ip
L104:
	and	ip, ip, #1
	str	ip, [v2, #432]
	ldmfd	sp!, {v1, v2, pc}
L65:
	cmp	a3, #0
	moveq	a1, lr
	ldmeqfd	sp!, {v1, v2, pc}
	cmp	a3, #32
	bne	L68
L105:
	mov	a1, #0
L103:
	mov	ip, lr, lsr #31
	str	ip, [v2, #432]
	ldmfd	sp!, {v1, v2, pc}
L68:
	bhi	L101
	mov	a1, lr, lsr a3
	sub	ip, a3, #1
	b	L102
L72:
	cmp	a3, #0
	moveq	a1, lr
	ldmeqfd	sp!, {v1, v2, pc}
	cmp	a3, #31
	mov	a1, lr, asr #31
	bhi	L103
	mov	a1, lr, asr a3
	sub	ip, a3, #1
	mov	ip, lr, asr ip
	b	L104
L77:
	cmp	a3, #0
	moveq	a1, lr
	ldmeqfd	sp!, {v1, v2, pc}
	ands	a3, a3, #31
	mov	a1, lr
	beq	L103
	mov	a1, lr, ror a3
	sub	ip, a3, #1
	b	L102
L53:
	cmp	lr, #15
	bne	L84
	ldr	a4, L106
	add	a3, a4, #424
	ldmia	a3, {a3, ip}	@ phole ldm
	ldr	a2, [a4, #432]
	ldr	a1, [a4, #436]
	mov	v2, a4
	ldr	lr, [a4, #440]
	mov	ip, ip, asl #30
	orr	ip, ip, a3, asl #31
	orr	ip, ip, a2, asl #29
	orr	ip, ip, a1, asl #28
	ldr	a3, [a4, #68]
	orr	ip, ip, lr, asl #26
	ldr	a2, [a4, #448]
	bic	a3, a3, #-67108861
	orr	ip, ip, a3
	orr	lr, ip, a2
	b	L85
L84:
	ldr	ip, L106
	mov	v2, ip
	add	ip, ip, #8
	ldr	lr, [ip, lr, asl #2]
L85:
	mov	a3, v1, asl #20
	mov	a3, a3, lsr #27
	mov	ip, v1, asl #25
	mov	ip, ip, lsr #30
	ldr	pc, [pc, ip, asl #2]
	nop
L97:
.word	L63
.word	L88
.word	L91
.word	L94
L88:
	cmp	a3, #0
	beq	L105
	mov	a1, lr, lsr a3
	sub	ip, a3, #1
	b	L102
L91:
	cmp	a3, #0
	mov	a1, lr, asr #31
	beq	L103
	mov	a1, lr, asr a3
	sub	ip, a3, #1
	mov	ip, lr, asr ip
	b	L104
L94:
	cmp	a3, #0
	bne	L95
	and	ip, lr, #1
	ldr	a3, [v2, #432]
	mov	a1, lr, lsr #1
	str	ip, [v2, #432]
	orr	a1, a1, a3, asl #31
	ldmfd	sp!, {v1, v2, pc}
L95:
	mov	a1, lr, ror a3
	sub	ip, a3, #1
	b	L102
L106:
.word	statestr
