/* Virtual Key codes */

#define VK_LBUTTON	(1)
#define VK_RBUTTON	(2)
#define VK_CANCEL	(3)
#define VK_MBUTTON	(4)
#define VK_BACK	(8)
#define VK_TAB	(9)
#define VK_CLEAR	(12)
#define VK_RETURN	(13)
#define VK_SHIFT	(16)
#define VK_CONTROL	(17)
#define VK_MENU	(18)
#define VK_PAUSE	(19)
#define VK_CAPITAL	(20)
#define VK_ESCAPE	(27)
#define VK_SPACE	(32)
#define VK_PRIOR	(33)
#define VK_NEXT	(34)
#define VK_END	(35)
#define VK_HOME	(36)
#define VK_LEFT	(37)
#define VK_UP	(38)
#define VK_RIGHT	(39)
#define VK_DOWN	(40)
#define VK_SELECT	(41)
#define VK_PRINT	(42)
#define VK_EXECUTE	(43)
#define VK_SNAPSHOT	(44)
#define VK_INSERT	(45)
#define VK_DELETE	(46)
#define VK_HELP	(47)
#define VK_0	(48)
#define VK_1	(49)
#define VK_2	(50)
#define VK_3	(51)
#define VK_4	(52)
#define VK_5	(53)
#define VK_6	(54)
#define VK_7	(55)
#define VK_8	(56)
#define VK_9	(57)
#define VK_A	(65)
#define VK_B	(66)
#define VK_C	(67)
#define VK_D	(68)
#define VK_E	(69)
#define VK_F	(70)
#define VK_G	(71)
#define VK_H	(72)
#define VK_I	(73)
#define VK_J	(74)
#define VK_K	(75)
#define VK_L	(76)
#define VK_M	(77)
#define VK_N	(78)
#define VK_O	(79)
#define VK_P	(80)
#define VK_Q	(81)
#define VK_R	(82)
#define VK_S	(83)
#define VK_T	(84)
#define VK_U	(85)
#define VK_V	(86)
#define VK_W	(87)
#define VK_X	(88)
#define VK_Y	(89)
#define VK_Z	(90)
#define VK_LWIN	(91)
#define VK_RWIN	(92)
#define VK_APPS	(93)
#define VK_NUMPAD0	(96)
#define VK_NUMPAD1	(97)
#define VK_NUMPAD2	(98)
#define VK_NUMPAD3	(99)
#define VK_NUMPAD4	(100)
#define VK_NUMPAD5	(101)
#define VK_NUMPAD6	(102)
#define VK_NUMPAD7	(103)
#define VK_NUMPAD8	(104)
#define VK_NUMPAD9	(105)
#define VK_MULTIPLY	(106)
#define VK_ADD	(107)
#define VK_SEPARATOR	(108)
#define VK_SUBTRACT	(109)
#define VK_DECIMAL	(110)
#define VK_DIVIDE	(111)
#define VK_F1	(112)
#define VK_F2	(113)
#define VK_F3	(114)
#define VK_F4	(115)
#define VK_F5	(116)
#define VK_F6	(117)
#define VK_F7	(118)
#define VK_F8	(119)
#define VK_F9	(120)
#define VK_F10	(121)
#define VK_F11	(122)
#define VK_F12	(123)
#define VK_F13	(124)
#define VK_F14	(125)
#define VK_F15	(126)
#define VK_F16	(127)
#define VK_F17	(128)
#define VK_F18	(129)
#define VK_F19	(130)
#define VK_F20	(131)
#define VK_F21	(132)
#define VK_F22	(133)
#define VK_F23	(134)
#define VK_F24	(135)

/* GetAsyncKeyState */
#define VK_NUMLOCK	(144)
#define VK_SCROLL	(145)
#define VK_LSHIFT	(160)
#define VK_RSHIFT	(161)
#define VK_LCONTROL	(162)
#define VK_RCONTROL	(163)
#define VK_LMENU	(164)
#define VK_RMENU	(165)

#define VK_OEM_1 (186)
#define VK_OEM_PLUS (187)
#define VK_OEM_COMMA (188)
#define VK_OEM_MINUS (189)
#define VK_OEM_PERIOD (190)
#define VK_OEM_2 (191)
#define VK_OEM_3 (192)
#define VK_OEM_4 (219)
#define VK_OEM_5 (220)
#define VK_OEM_6 (221)
#define VK_OEM_7 (222)
#define VK_OEM_8 (223)

/* ImmGetVirtualKey */
#define VK_PROCESSKEY	(229)

typedef struct {
    int sym;
    arch_key_id kid;
} vk_to_arch_key;

#define X(sym, kid) { VK_ ## sym, ARCH_KEY_ ## kid },
static const vk_to_arch_key vk_to_arch_key_map[] = {
    X(ESCAPE, escape)
    X(F1, f1)
    X(F2, f2)
    X(F3, f3)
    X(F4, f4)
    X(F5, f5)
    X(F6, f6)
    X(F7, f7)
    X(F8, f8)
    X(F9, f9)
    X(F10, f10)
    X(F11, f11)
    X(F12, f12)

    X(OEM_8, grave)
    X(1, 1)
    X(2, 2)
    X(3, 3)
    X(4, 4)
    X(5, 5)
    X(6, 6)
    X(7, 7)
    X(8, 8)
    X(9, 9)
    X(0, 0)
    X(OEM_MINUS, minus)
    X(OEM_PLUS, equal)
    X(OEM_7, sterling)
    X(BACK, backspace)

    X(TAB, tab)
    X(Q, q)
    X(W, w)
    X(E, e)
    X(R, r)
    X(T, t)
    X(Y, y)
    X(U, u)
    X(I, i)
    X(O, o)
    X(P, p)
    X(OEM_4, bracket_l)
    X(OEM_6, bracket_r)
    X(OEM_5, backslash)

    X(LCONTROL, control_l)
    X(A, a)
    X(S, s)
    X(D, d)
    X(F, f)
    X(G, g)
    X(H, h)
    X(J, j)
    X(K, k)
    X(L, l)
    X(OEM_1, semicolon)
    X(OEM_3, apostrophe)
    X(RETURN, return)

    X(LSHIFT, shift_l)
    X(Z, z)
    X(X, x)
    X(C, c)
    X(V, v)
    X(B, b)
    X(N, n)
    X(M, m)
    X(OEM_COMMA, comma)
    X(OEM_PERIOD, period)
    X(OEM_2, slash)
    X(RSHIFT, shift_r)

    X(CAPITAL, caps_lock)
    X(LMENU, alt_l)
    X(SPACE, space)
    X(RMENU, alt_r)
    X(RCONTROL, control_r)

    X(SNAPSHOT, print)
    X(SCROLL, scroll_lock)
    X(PAUSE, break)
    X(INSERT, insert)
    X(HOME, home)
    X(PRIOR, page_up)
    X(DELETE, delete)
    X(END, copy)
    X(NEXT, page_down)

    X(UP, up)
    X(LEFT, left)
    X(DOWN, down)
    X(RIGHT, right)

    X(NUMLOCK, num_lock)
    X(DIVIDE, kp_slash)
    X(MULTIPLY, kp_star)
    X(SEPARATOR, kp_hash)
    X(NUMPAD7, kp_7)
    X(NUMPAD8, kp_8)
    X(NUMPAD9, kp_9)
    X(SUBTRACT, kp_minus)
    X(NUMPAD4, kp_4)
    X(NUMPAD5, kp_5)
    X(NUMPAD6, kp_6)
    X(ADD, kp_plus)
    X(NUMPAD1, kp_1)
    X(NUMPAD2, kp_2)
    X(NUMPAD3, kp_3)
    X(NUMPAD0, kp_0)
    X(DECIMAL, kp_decimal)
    X(EXECUTE, kp_enter)

    { 0, 0 },
};
#undef X
